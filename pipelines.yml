resources:
  - name: gosvc_gitRepo
    type: GitRepo
    configuration:
      path: jfrogtw/go-service
      gitProvider: demo_github

  - name: gosvc_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: art
      buildName: svc_build
      buildNumber: 1

  - name: gosvc_promoted_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: art
      buildName: svc_build
      buildNumber: 1

  - name: be_gitRepo
    type: GitRepo
    configuration:
      path: jfrogtw/java-backend
      gitProvider: demo_github

  - name: appl_build_info_output
    type: BuildInfo
    configuration:
      sourceArtifactory: art
      buildName: backend_build
      buildNumber: 1
      
  - name: appl_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: art
      buildName: backend_build
      buildNumber: 1

  - name: appl_promoted_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: art
      buildName: backend_build
      buildNumber: 1

  - name: fe_gitRepo
    type: GitRepo
    configuration:
      path: jfrogtw/vue-frontend
      gitProvider: demo_github

#  - name: release_bundle
#    type: ReleaseBundle
#    configuration:
#      sourceDistribution: demoDist
#      name: demo_rb
#      version: v1.0.0
#
#  - name: signed_bundle
#    type: ReleaseBundle
#    configuration:
#      sourceDistribution: demoDist
#      name: demo_rb
#      version: v1.0.0

#  - name: distribution_rules
#    type: DistributionRule
#    configuration:
#      sourceDistribution: demoDist
#      serviceName: "*"
#      siteName: "*"
#      cityName: "*"
#      countryCodes:
#        - "CN"
#        - "GB"


pipelines:
  - name: demo_gosvc
    steps:
      - name: bld_svc
        type: DockerBuild
        configuration:
          affinityGroup: dbp_group
          dockerFileLocation: .
          dockerFileName: Dockerfile
          dockerImageName: kaloula.jfrog-pipelines.com:5000/docker-local/gosvc
          dockerImageTag: ${run_number}
          inputResources:
            - name: gosvc_gitRepo
          integrations:
            - name: art

      - name: push_svc
        type: DockerPush
        configuration:
          affinityGroup: dbp_group
          targetRepository: docker-local
          integrations:
            - name: art
          inputSteps:
            - name: bld_svc

      - name: publish_svc_build
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: push_svc
          outputResources:
            - name: gosvc_build_info

      - name: promote_svc_build
        type: PromoteBuild
        configuration:
          targetRepository: demo-pipelines
          integrations:
            - name: art
          inputResources:
            - name: gosvc_build_info
          outputResources:
            - name: gosvc_promoted_build_info

  - name: demo_application
    steps:
      - name: bld_backend
        type: MvnBuild
        configuration:
          sourceLocation: .
          mvnCommand: clean install -ntp
          configFileLocation: .
          configFileName: mvn-art-config
          inputResources:
            - name: be_gitRepo
          integrations:
            - name: art
          runtime:
            type: image
            image:
              auto:
                language: java
                versions:
                  - "11"
        execution:
          onStart:
            - javac -version
            - mvn --version


      - name: bld_frontend
        type: NpmBuild
        configuration:
          npmArgs: --no-progress --no-audit
          sourceLocation: .
          repositoryName: npm-virtual
          inputResources:
            - name: fe_gitRepo
          integrations:
            - name: art

      - name: pack_frontend
        type: Bash
        configuration:
          inputSteps:
            - name: bld_frontend
          integrations:
            - name: art
        execution:
          onStart:
            - export tempStateLocation="$step_tmp_dir/npmSourceState"
            - restore_run_files npmBuildInputGitRepo $tempStateLocation
            - pushd $tempStateLocation
            - npm run build
            - add_run_files $tempStateLocation/. npmBuildInputGitRepo

      - name: publish_frontend
        type: NpmPublish
        configuration:
          repositoryName: npm-libs-local
          inputSteps:
            - name: pack_frontend
          integrations:
            - name: art
        execution:
          onStart:
            - export inputNpmBuildStepName="bld_frontend"
         
      - name: build_app
        type: Bash
        configuration:
          environmentVariables:
            dockerImageName: 34.74.146.128:8082/docker-local/app
            dockerImageTag: ${run_number}
          inputResources:
            - name: be_gitRepo
              trigger: false
          inputSteps:
            - name: bld_backend
            - name: publish_frontend
          integrations:
            - name: art
        execution:
          onStart:
            - rm -rf $run_dir/workspace/jfrog
            - retry_command jfrog rt config --url $int_art_url --user $int_art_user --apikey $int_art_apikey --interactive=false
            - pushd $res_be_gitRepo_resourcePath
            - add_run_variables buildStepName=${step_name}
            - add_run_variables ${step_name}_buildNumber=${run_number}
            - add_run_variables ${step_name}_buildName=${pipeline_name}
            - docker build --pull --no-cache -t $dockerImageName:$dockerImageTag --build-arg REGISTRY=${int_art_url} .
            - jfrog rt bce $pipeline_name $run_number
            - jfrog rt docker-push 34.74.146.128:8082/docker-local/app:$run_number docker-local --build-name=$pipeline_name --build-number=$run_number
            - add_run_files /tmp/jfrog/. jfrog

      - name: publish_app_build
        type: PublishBuildInfo
        configuration:
#           forceXrayScan: true
          inputSteps:
            - name: build_app
          outputResources:
            - name: appl_build_info

      - name: promote_app_build
        type: PromoteBuild
        configuration:
          targetRepository: demo-pipelines
          integrations:
            - name: art
          inputResources:
            - name: appl_build_info
          outputResources:
            - name: appl_promoted_build_info
      
      - name: demo_scan
        type: XrayScan
        configuration:
          inputResources:
            - name: appl_promoted_build_info
            
#  - name: demo_release_mgmt
#    steps:
#      - name: bundle
#        type: CreateReleaseBundle
#        configuration:
#          releaseBundleName: demo_rb
#          releaseBundleVersion: v1.0.${run_number}
#          dryRun: false
#          sign: false
#          description: "some random test description"
#          inputResources:
#            - name: gosvc_promoted_build_info
#              trigger: false
#            - name: appl_promoted_build_info
#              trigger: false
#          outputResources:
#            - name: release_bundle
#          releaseNotes:
#            syntax: markdown
#            content: |
#              ## Heading
#                * Bullet
#                * Points
#            
#      - name: sign
#        type: SignReleaseBundle
#        configuration:
#          inputResources:
#            - name: release_bundle
#          outputResources:
#            - name: signed_bundle
#
#      - name: distribute
#        type: DistributeReleaseBundle
#        configuration:
#          dryRun: false
#          inputResources:
#            - name: signed_bundle
#            - name: distribution_rules
#
#      - name: deploy
#        type: Bash
#        configuration:
#          environmentVariables:
#            docker_repository: demoPipelines
#            artifactory_address: 34.66.107.45:8090
#          integrations:
#            - name: demoEdge
#          inputResources:
#            - name: deploy_vm
#            - name: gosvc_promoted_build_info
#              trigger: false
#            - name: appl_promoted_build_info
#              trigger: false
#          inputSteps:
#            - name: distribute
#        execution:
#          onExecute:
#            - ssh -i ~/.ssh/deploy_vm root@${res_deploy_vm_targets_0} sudo /root/deploy-to-prod-test.sh $artifactory_address $docker_repository $int_edge_art_apikey $res_appl_promoted_build_info_buildNumber $res_gosvc_promoted_build_info_buildNumber
